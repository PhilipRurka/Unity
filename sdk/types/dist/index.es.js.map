{"version":3,"file":"index.es.js","sources":["../src/contentful-codegen/TypeArticle.ts","../src/contentful-codegen/TypeCaptainsLog.ts","../src/contentful-codegen/TypeContentSection.ts","../src/contentful-codegen/TypeHierarchyLayout.ts","../src/contentful-codegen/TypeHierarchyLink.ts","../src/contentful-codegen/TypeInfobox.ts","../src/contentful-codegen/TypeInfoboxBlock.ts","../src/contentful-codegen/TypeInfoboxItem.ts","../src/contentful-codegen/TypeLink.ts"],"sourcesContent":["import type { ChainModifiers, Entry, EntryFieldTypes, EntrySkeletonType, LocaleCode } from \"contentful\";\nimport type { TypeContentSectionSkeleton } from \"./TypeContentSection\";\nimport type { TypeInfoboxSkeleton } from \"./TypeInfobox\";\nimport type { TypeLinkSkeleton } from \"./TypeLink\";\n\nexport interface TypeArticleFields {\n    slug: EntryFieldTypes.Symbol;\n    title: EntryFieldTypes.Symbol;\n    articleType: EntryFieldTypes.Symbol<\"Character\" | \"Generic\">;\n    infobox?: EntryFieldTypes.EntryLink<TypeInfoboxSkeleton>;\n    content: EntryFieldTypes.Array<EntryFieldTypes.EntryLink<TypeContentSectionSkeleton>>;\n    keywordLinks?: EntryFieldTypes.Array<EntryFieldTypes.Symbol>;\n    tags?: EntryFieldTypes.Array<EntryFieldTypes.Symbol>;\n    previousRecommendedLink?: EntryFieldTypes.EntryLink<TypeLinkSkeleton>;\n    nextRecommendedLink?: EntryFieldTypes.EntryLink<TypeLinkSkeleton>;\n    keywordsHelperCheck?: EntryFieldTypes.RichText;\n}\n\nexport type TypeArticleSkeleton = EntrySkeletonType<TypeArticleFields, \"article\">;\nexport type TypeArticle<Modifiers extends ChainModifiers, Locales extends LocaleCode = LocaleCode> = Entry<TypeArticleSkeleton, Modifiers, Locales>;\n\nexport function isTypeArticle<Modifiers extends ChainModifiers, Locales extends LocaleCode>(entry: Entry<EntrySkeletonType, Modifiers, Locales>): entry is TypeArticle<Modifiers, Locales> {\n    return entry.sys.contentType.sys.id === 'article'\n}\n\nexport type TypeArticleWithoutLinkResolutionResponse = TypeArticle<\"WITHOUT_LINK_RESOLUTION\">;\nexport type TypeArticleWithoutUnresolvableLinksResponse = TypeArticle<\"WITHOUT_UNRESOLVABLE_LINKS\">;\nexport type TypeArticleWithAllLocalesResponse<Locales extends LocaleCode = LocaleCode> = TypeArticle<\"WITH_ALL_LOCALES\", Locales>;\nexport type TypeArticleWithAllLocalesAndWithoutLinkResolutionResponse<Locales extends LocaleCode = LocaleCode> = TypeArticle<\"WITHOUT_LINK_RESOLUTION\" | \"WITH_ALL_LOCALES\", Locales>;\nexport type TypeArticleWithAllLocalesAndWithoutUnresolvableLinksResponse<Locales extends LocaleCode = LocaleCode> = TypeArticle<\"WITHOUT_UNRESOLVABLE_LINKS\" | \"WITH_ALL_LOCALES\", Locales>;\n","import type { ChainModifiers, Entry, EntryFieldTypes, EntrySkeletonType, LocaleCode } from \"contentful\";\n\nexport interface TypeCaptainsLogFields {\n    entryTitle: EntryFieldTypes.Symbol;\n    notes?: EntryFieldTypes.RichText;\n    incompleteUnderlinedItems?: EntryFieldTypes.RichText;\n    keywordLinksCheckOverview?: EntryFieldTypes.RichText;\n}\n\nexport type TypeCaptainsLogSkeleton = EntrySkeletonType<TypeCaptainsLogFields, \"captainsLog\">;\nexport type TypeCaptainsLog<Modifiers extends ChainModifiers, Locales extends LocaleCode = LocaleCode> = Entry<TypeCaptainsLogSkeleton, Modifiers, Locales>;\n\nexport function isTypeCaptainsLog<Modifiers extends ChainModifiers, Locales extends LocaleCode>(entry: Entry<EntrySkeletonType, Modifiers, Locales>): entry is TypeCaptainsLog<Modifiers, Locales> {\n    return entry.sys.contentType.sys.id === 'captainsLog'\n}\n\nexport type TypeCaptainsLogWithoutLinkResolutionResponse = TypeCaptainsLog<\"WITHOUT_LINK_RESOLUTION\">;\nexport type TypeCaptainsLogWithoutUnresolvableLinksResponse = TypeCaptainsLog<\"WITHOUT_UNRESOLVABLE_LINKS\">;\nexport type TypeCaptainsLogWithAllLocalesResponse<Locales extends LocaleCode = LocaleCode> = TypeCaptainsLog<\"WITH_ALL_LOCALES\", Locales>;\nexport type TypeCaptainsLogWithAllLocalesAndWithoutLinkResolutionResponse<Locales extends LocaleCode = LocaleCode> = TypeCaptainsLog<\"WITHOUT_LINK_RESOLUTION\" | \"WITH_ALL_LOCALES\", Locales>;\nexport type TypeCaptainsLogWithAllLocalesAndWithoutUnresolvableLinksResponse<Locales extends LocaleCode = LocaleCode> = TypeCaptainsLog<\"WITHOUT_UNRESOLVABLE_LINKS\" | \"WITH_ALL_LOCALES\", Locales>;\n","import type { ChainModifiers, Entry, EntryFieldTypes, EntrySkeletonType, LocaleCode } from \"contentful\";\n\nexport interface TypeContentSectionFields {\n    entryTitle: EntryFieldTypes.Symbol;\n    title?: EntryFieldTypes.Symbol;\n    content: EntryFieldTypes.RichText;\n}\n\nexport type TypeContentSectionSkeleton = EntrySkeletonType<TypeContentSectionFields, \"contentSection\">;\nexport type TypeContentSection<Modifiers extends ChainModifiers, Locales extends LocaleCode = LocaleCode> = Entry<TypeContentSectionSkeleton, Modifiers, Locales>;\n\nexport function isTypeContentSection<Modifiers extends ChainModifiers, Locales extends LocaleCode>(entry: Entry<EntrySkeletonType, Modifiers, Locales>): entry is TypeContentSection<Modifiers, Locales> {\n    return entry.sys.contentType.sys.id === 'contentSection'\n}\n\nexport type TypeContentSectionWithoutLinkResolutionResponse = TypeContentSection<\"WITHOUT_LINK_RESOLUTION\">;\nexport type TypeContentSectionWithoutUnresolvableLinksResponse = TypeContentSection<\"WITHOUT_UNRESOLVABLE_LINKS\">;\nexport type TypeContentSectionWithAllLocalesResponse<Locales extends LocaleCode = LocaleCode> = TypeContentSection<\"WITH_ALL_LOCALES\", Locales>;\nexport type TypeContentSectionWithAllLocalesAndWithoutLinkResolutionResponse<Locales extends LocaleCode = LocaleCode> = TypeContentSection<\"WITHOUT_LINK_RESOLUTION\" | \"WITH_ALL_LOCALES\", Locales>;\nexport type TypeContentSectionWithAllLocalesAndWithoutUnresolvableLinksResponse<Locales extends LocaleCode = LocaleCode> = TypeContentSection<\"WITHOUT_UNRESOLVABLE_LINKS\" | \"WITH_ALL_LOCALES\", Locales>;\n","import type { ChainModifiers, Entry, EntryFieldTypes, EntrySkeletonType, LocaleCode } from \"contentful\";\nimport type { TypeHierarchyLinkSkeleton } from \"./TypeHierarchyLink\";\n\nexport interface TypeHierarchyLayoutFields {\n    entryTitle: EntryFieldTypes.Symbol;\n    links: EntryFieldTypes.Array<EntryFieldTypes.EntryLink<TypeHierarchyLinkSkeleton>>;\n}\n\nexport type TypeHierarchyLayoutSkeleton = EntrySkeletonType<TypeHierarchyLayoutFields, \"hierarchyLayout\">;\nexport type TypeHierarchyLayout<Modifiers extends ChainModifiers, Locales extends LocaleCode = LocaleCode> = Entry<TypeHierarchyLayoutSkeleton, Modifiers, Locales>;\n\nexport function isTypeHierarchyLayout<Modifiers extends ChainModifiers, Locales extends LocaleCode>(entry: Entry<EntrySkeletonType, Modifiers, Locales>): entry is TypeHierarchyLayout<Modifiers, Locales> {\n    return entry.sys.contentType.sys.id === 'hierarchyLayout'\n}\n\nexport type TypeHierarchyLayoutWithoutLinkResolutionResponse = TypeHierarchyLayout<\"WITHOUT_LINK_RESOLUTION\">;\nexport type TypeHierarchyLayoutWithoutUnresolvableLinksResponse = TypeHierarchyLayout<\"WITHOUT_UNRESOLVABLE_LINKS\">;\nexport type TypeHierarchyLayoutWithAllLocalesResponse<Locales extends LocaleCode = LocaleCode> = TypeHierarchyLayout<\"WITH_ALL_LOCALES\", Locales>;\nexport type TypeHierarchyLayoutWithAllLocalesAndWithoutLinkResolutionResponse<Locales extends LocaleCode = LocaleCode> = TypeHierarchyLayout<\"WITHOUT_LINK_RESOLUTION\" | \"WITH_ALL_LOCALES\", Locales>;\nexport type TypeHierarchyLayoutWithAllLocalesAndWithoutUnresolvableLinksResponse<Locales extends LocaleCode = LocaleCode> = TypeHierarchyLayout<\"WITHOUT_UNRESOLVABLE_LINKS\" | \"WITH_ALL_LOCALES\", Locales>;\n","import type { ChainModifiers, Entry, EntryFieldTypes, EntrySkeletonType, LocaleCode } from \"contentful\";\nimport type { TypeLinkSkeleton } from \"./TypeLink\";\n\nexport interface TypeHierarchyLinkFields {\n    entryTitle: EntryFieldTypes.Symbol;\n    link: EntryFieldTypes.EntryLink<TypeLinkSkeleton>;\n    childrenLinks?: EntryFieldTypes.Array<EntryFieldTypes.EntryLink<TypeHierarchyLinkSkeleton>>;\n}\n\nexport type TypeHierarchyLinkSkeleton = EntrySkeletonType<TypeHierarchyLinkFields, \"hierarchyLink\">;\nexport type TypeHierarchyLink<Modifiers extends ChainModifiers, Locales extends LocaleCode = LocaleCode> = Entry<TypeHierarchyLinkSkeleton, Modifiers, Locales>;\n\nexport function isTypeHierarchyLink<Modifiers extends ChainModifiers, Locales extends LocaleCode>(entry: Entry<EntrySkeletonType, Modifiers, Locales>): entry is TypeHierarchyLink<Modifiers, Locales> {\n    return entry.sys.contentType.sys.id === 'hierarchyLink'\n}\n\nexport type TypeHierarchyLinkWithoutLinkResolutionResponse = TypeHierarchyLink<\"WITHOUT_LINK_RESOLUTION\">;\nexport type TypeHierarchyLinkWithoutUnresolvableLinksResponse = TypeHierarchyLink<\"WITHOUT_UNRESOLVABLE_LINKS\">;\nexport type TypeHierarchyLinkWithAllLocalesResponse<Locales extends LocaleCode = LocaleCode> = TypeHierarchyLink<\"WITH_ALL_LOCALES\", Locales>;\nexport type TypeHierarchyLinkWithAllLocalesAndWithoutLinkResolutionResponse<Locales extends LocaleCode = LocaleCode> = TypeHierarchyLink<\"WITHOUT_LINK_RESOLUTION\" | \"WITH_ALL_LOCALES\", Locales>;\nexport type TypeHierarchyLinkWithAllLocalesAndWithoutUnresolvableLinksResponse<Locales extends LocaleCode = LocaleCode> = TypeHierarchyLink<\"WITHOUT_UNRESOLVABLE_LINKS\" | \"WITH_ALL_LOCALES\", Locales>;\n","import type { ChainModifiers, Entry, EntryFieldTypes, EntrySkeletonType, LocaleCode } from \"contentful\";\nimport type { TypeInfoboxBlockSkeleton } from \"./TypeInfoboxBlock\";\n\nexport interface TypeInfoboxFields {\n    entryTitle: EntryFieldTypes.Symbol;\n    image?: EntryFieldTypes.AssetLink;\n    blocks: EntryFieldTypes.Array<EntryFieldTypes.EntryLink<TypeInfoboxBlockSkeleton>>;\n}\n\nexport type TypeInfoboxSkeleton = EntrySkeletonType<TypeInfoboxFields, \"infobox\">;\nexport type TypeInfobox<Modifiers extends ChainModifiers, Locales extends LocaleCode = LocaleCode> = Entry<TypeInfoboxSkeleton, Modifiers, Locales>;\n\nexport function isTypeInfobox<Modifiers extends ChainModifiers, Locales extends LocaleCode>(entry: Entry<EntrySkeletonType, Modifiers, Locales>): entry is TypeInfobox<Modifiers, Locales> {\n    return entry.sys.contentType.sys.id === 'infobox'\n}\n\nexport type TypeInfoboxWithoutLinkResolutionResponse = TypeInfobox<\"WITHOUT_LINK_RESOLUTION\">;\nexport type TypeInfoboxWithoutUnresolvableLinksResponse = TypeInfobox<\"WITHOUT_UNRESOLVABLE_LINKS\">;\nexport type TypeInfoboxWithAllLocalesResponse<Locales extends LocaleCode = LocaleCode> = TypeInfobox<\"WITH_ALL_LOCALES\", Locales>;\nexport type TypeInfoboxWithAllLocalesAndWithoutLinkResolutionResponse<Locales extends LocaleCode = LocaleCode> = TypeInfobox<\"WITHOUT_LINK_RESOLUTION\" | \"WITH_ALL_LOCALES\", Locales>;\nexport type TypeInfoboxWithAllLocalesAndWithoutUnresolvableLinksResponse<Locales extends LocaleCode = LocaleCode> = TypeInfobox<\"WITHOUT_UNRESOLVABLE_LINKS\" | \"WITH_ALL_LOCALES\", Locales>;\n","import type { ChainModifiers, Entry, EntryFieldTypes, EntrySkeletonType, LocaleCode } from \"contentful\";\nimport type { TypeInfoboxItemSkeleton } from \"./TypeInfoboxItem\";\n\nexport interface TypeInfoboxBlockFields {\n    title: EntryFieldTypes.Symbol;\n    items: EntryFieldTypes.Array<EntryFieldTypes.EntryLink<TypeInfoboxItemSkeleton>>;\n}\n\nexport type TypeInfoboxBlockSkeleton = EntrySkeletonType<TypeInfoboxBlockFields, \"infoboxBlock\">;\nexport type TypeInfoboxBlock<Modifiers extends ChainModifiers, Locales extends LocaleCode = LocaleCode> = Entry<TypeInfoboxBlockSkeleton, Modifiers, Locales>;\n\nexport function isTypeInfoboxBlock<Modifiers extends ChainModifiers, Locales extends LocaleCode>(entry: Entry<EntrySkeletonType, Modifiers, Locales>): entry is TypeInfoboxBlock<Modifiers, Locales> {\n    return entry.sys.contentType.sys.id === 'infoboxBlock'\n}\n\nexport type TypeInfoboxBlockWithoutLinkResolutionResponse = TypeInfoboxBlock<\"WITHOUT_LINK_RESOLUTION\">;\nexport type TypeInfoboxBlockWithoutUnresolvableLinksResponse = TypeInfoboxBlock<\"WITHOUT_UNRESOLVABLE_LINKS\">;\nexport type TypeInfoboxBlockWithAllLocalesResponse<Locales extends LocaleCode = LocaleCode> = TypeInfoboxBlock<\"WITH_ALL_LOCALES\", Locales>;\nexport type TypeInfoboxBlockWithAllLocalesAndWithoutLinkResolutionResponse<Locales extends LocaleCode = LocaleCode> = TypeInfoboxBlock<\"WITHOUT_LINK_RESOLUTION\" | \"WITH_ALL_LOCALES\", Locales>;\nexport type TypeInfoboxBlockWithAllLocalesAndWithoutUnresolvableLinksResponse<Locales extends LocaleCode = LocaleCode> = TypeInfoboxBlock<\"WITHOUT_UNRESOLVABLE_LINKS\" | \"WITH_ALL_LOCALES\", Locales>;\n","import type { ChainModifiers, Entry, EntryFieldTypes, EntrySkeletonType, LocaleCode } from \"contentful\";\n\nexport interface TypeInfoboxItemFields {\n    title: EntryFieldTypes.Symbol;\n    description: EntryFieldTypes.Text;\n}\n\nexport type TypeInfoboxItemSkeleton = EntrySkeletonType<TypeInfoboxItemFields, \"infoboxItem\">;\nexport type TypeInfoboxItem<Modifiers extends ChainModifiers, Locales extends LocaleCode = LocaleCode> = Entry<TypeInfoboxItemSkeleton, Modifiers, Locales>;\n\nexport function isTypeInfoboxItem<Modifiers extends ChainModifiers, Locales extends LocaleCode>(entry: Entry<EntrySkeletonType, Modifiers, Locales>): entry is TypeInfoboxItem<Modifiers, Locales> {\n    return entry.sys.contentType.sys.id === 'infoboxItem'\n}\n\nexport type TypeInfoboxItemWithoutLinkResolutionResponse = TypeInfoboxItem<\"WITHOUT_LINK_RESOLUTION\">;\nexport type TypeInfoboxItemWithoutUnresolvableLinksResponse = TypeInfoboxItem<\"WITHOUT_UNRESOLVABLE_LINKS\">;\nexport type TypeInfoboxItemWithAllLocalesResponse<Locales extends LocaleCode = LocaleCode> = TypeInfoboxItem<\"WITH_ALL_LOCALES\", Locales>;\nexport type TypeInfoboxItemWithAllLocalesAndWithoutLinkResolutionResponse<Locales extends LocaleCode = LocaleCode> = TypeInfoboxItem<\"WITHOUT_LINK_RESOLUTION\" | \"WITH_ALL_LOCALES\", Locales>;\nexport type TypeInfoboxItemWithAllLocalesAndWithoutUnresolvableLinksResponse<Locales extends LocaleCode = LocaleCode> = TypeInfoboxItem<\"WITHOUT_UNRESOLVABLE_LINKS\" | \"WITH_ALL_LOCALES\", Locales>;\n","import type { ChainModifiers, Entry, EntryFieldTypes, EntrySkeletonType, LocaleCode } from \"contentful\";\n\nexport interface TypeLinkFields {\n    title: EntryFieldTypes.Symbol;\n    subtitle?: EntryFieldTypes.Symbol;\n    slug: EntryFieldTypes.Symbol;\n}\n\nexport type TypeLinkSkeleton = EntrySkeletonType<TypeLinkFields, \"link\">;\nexport type TypeLink<Modifiers extends ChainModifiers, Locales extends LocaleCode = LocaleCode> = Entry<TypeLinkSkeleton, Modifiers, Locales>;\n\nexport function isTypeLink<Modifiers extends ChainModifiers, Locales extends LocaleCode>(entry: Entry<EntrySkeletonType, Modifiers, Locales>): entry is TypeLink<Modifiers, Locales> {\n    return entry.sys.contentType.sys.id === 'link'\n}\n\nexport type TypeLinkWithoutLinkResolutionResponse = TypeLink<\"WITHOUT_LINK_RESOLUTION\">;\nexport type TypeLinkWithoutUnresolvableLinksResponse = TypeLink<\"WITHOUT_UNRESOLVABLE_LINKS\">;\nexport type TypeLinkWithAllLocalesResponse<Locales extends LocaleCode = LocaleCode> = TypeLink<\"WITH_ALL_LOCALES\", Locales>;\nexport type TypeLinkWithAllLocalesAndWithoutLinkResolutionResponse<Locales extends LocaleCode = LocaleCode> = TypeLink<\"WITHOUT_LINK_RESOLUTION\" | \"WITH_ALL_LOCALES\", Locales>;\nexport type TypeLinkWithAllLocalesAndWithoutUnresolvableLinksResponse<Locales extends LocaleCode = LocaleCode> = TypeLink<\"WITHOUT_UNRESOLVABLE_LINKS\" | \"WITH_ALL_LOCALES\", Locales>;\n"],"names":[],"mappings":"AAqBM,SAAA,aAAA,CAAsF,KAAmD,EAAA;AAC3I,EAAA,OAAO,KAAM,CAAA,GAAA,CAAI,WAAY,CAAA,GAAA,CAAI,EAAO,KAAA,SAAA,CAAA;AAAA;;ACVtC,SAAA,iBAAA,CAA0F,KAAmD,EAAA;AAC/I,EAAA,OAAO,KAAM,CAAA,GAAA,CAAI,WAAY,CAAA,GAAA,CAAI,EAAO,KAAA,aAAA,CAAA;AAAA;;ACFtC,SAAA,oBAAA,CAA6F,KAAmD,EAAA;AAClJ,EAAA,OAAO,KAAM,CAAA,GAAA,CAAI,WAAY,CAAA,GAAA,CAAI,EAAO,KAAA,gBAAA,CAAA;AAAA;;ACDtC,SAAA,qBAAA,CAA8F,KAAmD,EAAA;AACnJ,EAAA,OAAO,KAAM,CAAA,GAAA,CAAI,WAAY,CAAA,GAAA,CAAI,EAAO,KAAA,iBAAA,CAAA;AAAA;;ACAtC,SAAA,mBAAA,CAA4F,KAAmD,EAAA;AACjJ,EAAA,OAAO,KAAM,CAAA,GAAA,CAAI,WAAY,CAAA,GAAA,CAAI,EAAO,KAAA,eAAA,CAAA;AAAA;;ACDtC,SAAA,aAAA,CAAsF,KAAmD,EAAA;AAC3I,EAAA,OAAO,KAAM,CAAA,GAAA,CAAI,WAAY,CAAA,GAAA,CAAI,EAAO,KAAA,SAAA,CAAA;AAAA;;ACFtC,SAAA,kBAAA,CAA2F,KAAmD,EAAA;AAChJ,EAAA,OAAO,KAAM,CAAA,GAAA,CAAI,WAAY,CAAA,GAAA,CAAI,EAAO,KAAA,cAAA,CAAA;AAAA;;ACFtC,SAAA,iBAAA,CAA0F,KAAmD,EAAA;AAC/I,EAAA,OAAO,KAAM,CAAA,GAAA,CAAI,WAAY,CAAA,GAAA,CAAI,EAAO,KAAA,aAAA,CAAA;AAAA;;ACAtC,SAAA,UAAA,CAAmF,KAAmD,EAAA;AACxI,EAAA,OAAO,KAAM,CAAA,GAAA,CAAI,WAAY,CAAA,GAAA,CAAI,EAAO,KAAA,MAAA,CAAA;AAAA;;;;"}